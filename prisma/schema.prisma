// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// CONFIGURATIONS******************************
generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./ERD.svg" // Specify output file, it can be PNG, SVG, etc.
//   format   = "svg" // Choose the desired format (png, svg)
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// ENUMERATIONS**************************
enum PaymentType {
  CREDIT
  PAYPAL
}

enum ShippingType {
  USPS
  UPS
  FEDEX
}

// MODELS**************
model User {
  id               Int             @id @default(autoincrement())
  displayName      String
  firstName        String
  lastName         String
  email            String
  bio              String?
  userId           String
  credential       String //Password. Might change this later
  // Relation
  profilePicture   Image?          @relation(fields: [profilePictureId], references: [id])
  profilePictureId Int?
  // Reverse relations
  Reviews          Review[]
  PaymentMethods   PaymentMethod[]
  Invoices         Invoice[]
  UserList         UserList[]
  Product          Product?        @relation(fields: [productId], references: [id])
  productId        Int?
}

model Seller {
  id             Int                @id @default(autoincrement())
  displayName    String
  firstName      String
  lastName       String
  // Reverse relations
  PostedProducts Product[]
  PostedImages   Image[]
  Collections    SellerCollection[]
}

model Product {
  id               Int    @id @default(autoincrement())
  name             String
  price            Float
  discountPercent  Float
  discountAbsolute Float
  description      String
  category         String
  //Relations

  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId Int
  image    Image  @relation(fields: [imageId], references: [id])
  imageId  Int

  // Reverse relations
  Reviews  Review[]
  Invoices Invoice[]
  User     User[]

  // Join tables
  UserLists    UserList[]         @relation("UserListToProduct") // Lists this product is listed in. Join table
  InCollection SellerCollection[] @relation("SellerCollectionToProduct") // The seller collections that feature this item. Join table
}

model Review {
  id        Int     @id @default(autoincrement())
  rating    Int
  review    String?
  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId Int
}

model PaymentMethod {
  id              Int         @id @default(autoincrement())
  identifier      String // Card or Paypal id
  expirationMonth Int
  expirationYear  Int
  paymentType     PaymentType
  street1         String
  street2         String?
  city            String
  state           String
  zip             String
  validation      String
  // Relations
  User            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int?
  // Reverse relations
  Invoices        Invoice[]
}

model Invoice {
  id              Int           @id @default(autoincrement())
  subtotal        Int
  tax             Int
  shipping        Int
  shippingType    ShippingType
  totalCost       Int
  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  paymentMethodId Int
  // Reverse relations
  Products        Product[]
}

model Image {
  id          Int       @id @default(autoincrement())
  url         String
  description String
  //Relations
  owner       Seller?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     Int?
  // Reverse relations
  Users       User[]
  Product     Product[]
}

model UserList {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  // Relations
  owner  User @relation(fields: [userId], references: [id])
  userId Int

  Products Product[] @relation("UserListToProduct") // Listing of products on the list. Join table
}

model SellerCollection {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  //Relations
  owner   Seller @relation(fields: [ownerId], references: [id])
  ownerId Int

  Products Product[] @relation("SellerCollectionToProduct") // The products in this collection. Join table
}
