// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// CONFIGURATIONS******************************
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// ENUMERATIONS**************************
enum PaymentType {
  CREDIT
  PAYPAL
}

// MODELS**************
model User {
  id          Int    @id @default(autoincrement())
  displayName String
  firstName   String
  lastName    String
  bio         String

  // Reverse relations
  Review         Review[]
  PaymentMethods PaymentMethod[]
}

model Seller {
  id          Int       @id @default(autoincrement())
  displayName String
  firstName   String
  lastName    String
  // Reverse relations
  Product     Product[]
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  price           Int
  discountPercent Float
  discountLiteral Int
  //Relations
  seller          Seller   @relation(fields: [sellerId], references: [id])
  sellerId        Int
  // Reverse relations
  Review          Review[]
}

model Review {
  id        Int     @id @default(autoincrement())
  rating    Int
  review    String?
  // Relations
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  userId    Int
  productId Int
}

model PaymentMethod {
  id              Int         @id @default(autoincrement())
  identifier      String // Card or Paypal id
  expirationMonth Int
  expirationYear  Int
  paymentMethod   PaymentType
  validation String

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}
